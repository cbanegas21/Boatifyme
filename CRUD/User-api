from flask import Flask, request, jsonify
import mysql.connector
from mysql.connector import Error

app = Flask(__name__)

# Conexión a la base de datos
def get_db_connection():
    return mysql.connector.connect(
        host='localhost',
        user='root',  # Reemplaza con tu usuario de MySQL
        password='2000',  # Reemplaza con tu contraseña
        database='boatifyme_db'
    )

# Endpoint para obtener todos los usuarios
@app.route('/user', methods=['GET'])
def get_users():
    try:
        conn = get_db_connection()
        cursor = conn.cursor(dictionary=True)
        cursor.execute("SELECT * FROM users")
        users = cursor.fetchall()
        return jsonify(users), 200
    except Error as e:
        return jsonify({"error": str(e)}), 500
    finally:
        if conn:
            conn.close()

# Endpoint para obtener un usuario por ID
@app.route('/user/<int:id>', methods=['GET'])
def get_user(id):
    try:
        conn = get_db_connection()
        cursor = conn.cursor(dictionary=True)
        cursor.execute("SELECT * FROM users WHERE user_id = %s", (id,))
        user = cursor.fetchone()
        if user:
            return jsonify(user), 200
        return jsonify({"message": "User not found"}), 404
    except Error as e:
        return jsonify({"error": str(e)}), 500
    finally:
        if conn:
            conn.close()

# Endpoint para crear un nuevo usuario
@app.route('/user', methods=['POST'])
def create_user():
    data = request.get_json()
    if not data.get('first_name') or not data.get('last_name') or not data.get('email') or not data.get('password_hash'):
        return jsonify({"message": "Missing required fields"}), 400

    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute(
            """
            INSERT INTO users (first_name, last_name, email, phone, password_hash, user_type)
            VALUES (%s, %s, %s, %s, %s, %s)
            """, 
            (data['first_name'], data['last_name'], data['email'], data.get('phone', None), data['password_hash'], data['user_type'])
        )
        conn.commit()
        return jsonify({"message": "User created successfully"}), 201
    except Error as e:
        return jsonify({"error": str(e)}), 500
    finally:
        if conn:
            conn.close()



# Endpoint para actualizar un usuario
@app.route('/user/<int:id>', methods=['PUT'])
def update_user(id):
    data = request.get_json()
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute(
            """
            UPDATE users
            SET first_name = %s, last_name = %s, email = %s, phone = %s, password_hash = %s, user_type = %s
            WHERE user_id = %s
            """, 
            (data['first_name'], data['last_name'], data['email'], data.get('phone', None), data['password_hash'], data['user_type'], id)
        )
        conn.commit()
        if cursor.rowcount > 0:
            return jsonify({"message": "User updated successfully"}), 200
        return jsonify({"message": "User not found"}), 404
    except Error as e:
        return jsonify({"error": str(e)}), 500
    finally:
        if conn:
            conn.close()

# Endpoint para eliminar un usuario
@app.route('/user/<int:id>', methods=['DELETE'])
def delete_user(id):
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("DELETE FROM users WHERE user_id = %s", (id,))
        conn.commit()
        if cursor.rowcount > 0:
            return jsonify({"message": "User deleted successfully"}), 200
        return jsonify({"message": "User not found"}), 404
    except Error as e:
        return jsonify({"error": str(e)}), 500
    finally:
        if conn:
            conn.close()

if __name__ == '__main__':
    app.run(debug=True)
